/**
 * En el review del script se encuentran los siguientes:
 * 1. Esta definida por clases, este no esta deprecado pero como punto de mejora se sugiere pasar a hooks y function components.
 * 2. El nombre del componente se sugiere que sea más descriptivo, esta bien que esté en CamelCase
 * 3. Para garantizar el tipo de dato declarado, se sugiere implementar proptypes o typescript
 * 4. Exite un error semántico, en la variable inicial se declara "location: ''", pero en al final en el prescrito esta como "this.state.local".
 * 5. La utilizacion de "key", este solo se utiliza cuando se tiene que renderizar una lista de datos (array), en este caso la data es un objeto.
 * 6. La URL de la Api podría pasarse a una constante o variable global (.env) y despues crear una carpeta "Services" para gestionarlo desde alli.
 */

// Para hacerlo más legible, se sugiere usar destructuring para la data

render() {
  const { name, location } =  this.state;
  return (...)
}


// El [] en el return hace un error en el render, se sugiere utilizar parentesis () y las dos lineas de codigo englobarlos con React.Fragment

render() {
  const { name, location } =  this.state;
  return (
    <React.Fragment>
      <h1>{`Nombre: ${name}`}</h1>
      <h2>{`País: ${location}`}</h2>
    </React.Fragment>
  )
}


// En la consulta del servicio hay un error con la recuperación de la data al utilizar "fetch", se sugiere lo siguiente

componentDidMount() {
  fetchUser().then(({ name, location } )=> {
    this.setState({
      name,
      location
    })
  });
}

async function fetchUser() {
  const response = await fetch('https://api.github.com/users/workshopsjsmvd');
  const user = await response.json();
  return user;
}



// Se podria hacer un funcion para consultar cualquier usuario

async function fetchUser(key) {
  const response = await fetch(`https://api.github.com/users/${key}`);
  const user = await response.json();
  return user;
}



/* ======= Improvement Code Typescript ============= */

import React from 'react';

interface IUser {
  name: string;
  location: string;
}

const FETCH_USERS = 'https://api.github.com/users';

function UserSingle() {
  const [user, setUser] = React.useState<IUser>({
    name: '',
    location: '',
  });

  const [isLoading, setIsLoading] = React.useState<boolean>(false);
  const [isError, setIsError] = React.useState<boolean>(false);

  const fetchUserSingle = async (key: string) => {
    setIsLoading(true);
    try {
      const response = await fetch(`${FETCH_USERS}/${key}`);
      const {
        data: { name, location },
      } = await response.json();
      setUser({ ...user, name, location });
      setIsLoading(false);
      setIsError(false);
    } catch (error) {
      setIsLoading(false);
      setIsError(error);
    }
  };

  React.useEffect(() => {
    fetchUserSingle('workshopsjsmvd');
  }, []);

  return (
    <React.Fragment>
      {isLoading ? (
        <div>Loading...</div>
      ) : (
        <div>
          <h1>{`Nombre: ${user.name}`}</h1>,
          <h2>{`País: ${user.location}`}</h2>
        </div>
      )}
    </React.Fragment>
  );
}

ReactDOM.render(
  <React.StrictMode>
    <UserSingle />
  </React.StrictMode>,
  document.getElementById('root')
)
